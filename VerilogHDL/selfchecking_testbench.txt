//  Binary to Grey 
module b_to_g(a,o);
  input [3:0]a;
   output [3:0]o;
assign o={a[3],{a[3]^a[2]},{a[2]^a[1]},{a[1]^a[0]}};
endmodule

// Testbench

module b_to_g_tb;
	reg [3:0]a_i;
        wire [3:0]o_o;
b_to_g b1(.a(a_i),.o(o_o));
initial 
begin
  bg_gen(4'b1100,4'b1010);
  bg_gen(4'b1010,4'b1111);
  bg_gen(4'b1011,4'b1111);
end
task bg_gen;
 input [3:0]a_t,o_t;
begin
   a_i=a_t;
  #5 if(o_o==o_t)
     $display("Data matched, a_i is %b, a_t is %b, o_o is %b, o_t is %b",a_i,a_t,o_o,o_t);
   else
       $display("Data not matched, a_i is %b, a_t is %b, o_o is %b, o_t is %b",a_i,a_t,o_o,o_t);
end
endtask
endmodule

// 1:4 Demux
module demux_r(input a,input s0,s1,output y0,y1,y2,y3);
    wire w1,w2;
     not n1(w1,s0);
     not n2(w2,s1);
      and a1(y0,w1,w2,a);
      and a2(y1,w1,s1,a);
      and a3(y2,s0,w2,a);
      and a4(y3,s0,s1,a);
  
endmodule

module demux_BFM(input i,s0,s1,output reg [3:0]y);
       always @(*)
          begin
          case({s0,s1})

              2'b00:y={3'b0,i};
               2'b01:y={2'b0,i,1'b0};
               2'b10:y={1'b0,i,2'b0};
               2'b11:y={i,3'b0};
          endcase
     end
  endmodule


// Testbench

module demux_rand_tb;
 reg  a_i;
  reg so_i,s1_i;
  wire [3:0]y_o,y_ref;

demux_r d11(.a(a_i),.s0(so_i),.s1(s1_i),.y0(y_o[0]),.y1(y_o[1]),.y2(y_o[2]),.y3(y_o[3]));
demux_BFM d2(.i(a_i),.s0(so_i),.s1(s1_i),.y(y_ref));

initial 
repeat(20)
   begin
  demux_rand_gen($random,$random,$random);
  
end


task demux_rand_gen;
input a_t,so_t,s1_t;
begin
  a_i=a_t;
   so_i=so_t;
   s1_i=s1_t;

 #10;
  if( (y_o[0]==y_ref[0]) &&    (y_o[1]==y_ref[1])  &&    (y_o[2]==y_ref[2]) &&  (y_o[3]==y_ref[3])  )
        
            $display($time,"Demux  matched ,a_i=%b,so_i=%b,s1_i is %b, y_ref is %b",a_i,so_i,s1_i,y_ref);
         else
       $display($time,"Demux  not  matched ,a_i=%b,so_i=%b,s1_i is %b, y_ref is %b",a_i,so_i,s1_i,y_ref);
end
endtask
endmodule


//Examle 

module cla_BFM(a,b,cin,sum,co);
input [3:0]a,b;
input cin;
output [3:0]sum;
output co;
assign {co,sum}=a+b+cin;
endmodule

module cla_adder(a,b,cin,sum,cout);

input[3:0] a,b;

input cin;

output [3:0] sum;

output cout;

wire p0,p1,p2,p3,g0,g1,g2,g3,c1,c2,c3,c4;

assign p0=(a[0]^ b[0]);
assign       p1=(a[1]^ b[1]);
 assign      p2=(a[2]^ b[2]);
 assign      p3=(a[3]^ b[3]);

assign g0=(a[0]& b[0]);
assign g1=(a[1]& b[1]);
assign g2=(a[2]& b[2]);
assign g3=(a[3]& b[3]);
	   
assign c0=cin;
assign c1=g0|(p0 & cin);
assign c2=g1|(p1 & g0)|(p1 & p0 & cin);
assign c3=g2|(p2 & g1)|(p2 & p1 & g0)|(p1 & p1 & p0 & cin);
assign c4=g3|(p3 & g2)|(p3 & p2 & g1)|(p3 & p2 & p1 & g0)|(p3 & p2 & p1 & p0 & cin);
	   
assign       sum[0]= p0^c0;
assign       sum[1]= p1^c1;
assign       sum[2]= p2^c2;
assign       sum[3]= p3^c3;
	   
assign cout = c4;

endmodule

//Testbench

module tb_cla;
reg [3:0]tb_a,tb_b;
reg tb_cin;
wire [3:0]exp_sum,ref_sum;
wire exp_co, ref_co;

cla_adder ins1(.a(tb_a),.b(tb_b),.cin(tb_cin),.sum(exp_sum),.cout(exp_co));
cla_BFM ins2(.a(tb_a),.b(tb_b),.cin(tb_cin),.sum(ref_sum),.co(ref_co));

initial
repeat(20)
begin
cla_random($random,$random,$random);
end

task cla_random;
input [3:0]a,b;
input c;

begin 
tb_a=a;
tb_b=b;
tb_cin=c;

#5;
if( (exp_sum==ref_sum) && (exp_co==ref_co))
$display("Result is correct :: simtime=%0g,a=%b, b=%b, cin=%b, EXP_SUM=%b, REF_SUM=%b, EXP_CO=%b, REF_CO=%b", $time,tb_a,tb_b,tb_cin,exp_sum, ref_sum, exp_co, ref_co);
else
$display("Result is Incorrect :: simtime=%0g,a=%b, b=%b, cin=%b, EXP_SUM=%b, REF_SUM=%b, EXP_CO=%b, REF_CO=%b", $time,tb_a,tb_b,tb_cin,exp_sum, ref_sum, exp_co, ref_co);
end
endtask
endmodule
