LEVEL-2:

 Design and implement JK-FlipFlop, D-FlipFlop and T-FlipFlop.
 Design and implement a system which takes 4-bit data and shifts left, right, reverses, passes the data depending upon a control signal(Don’t use any registers).
 Design and implement a 4-bit Counter
 Design and implement a system which takes 8-bit data and stores in memory and based on request it should send data ROM/ RAM.

______________
1. Design and implement JK-FlipFlop, D-FlipFlop and T-FlipFlop.

// JK - Flipflop

module jkff(j,k,clk,rst,q,qbar);
input j,k;
input clk,rst;
output reg q,qbar;
always@(posedge clk)
begin
if(rst)
begin
q<=0;
qbar<=1;
end
else
case({j,k})
2'b00: begin q<=q; qbar<=qbar; end
2'b01: begin q<=0; qbar<=1; end
2'b10: begin q<=1; qbar<=0; end
2'b11: begin q<=~q; qbar<=~qbar; end
endcase
end
endmodule

// testbench
`timescale 1ns/1ps
module tb;
 reg j,k;
 reg clk,rst;
 wire q,qbar;
 jkff ins1(j,k,clk,rst,q,qbar);
 
  
  initial begin 
    $monitor($time, " clk=%b,rst=%b,j=%b,k=%b,q=%b,qbar=%b",clk,rst,j,k,q,qbar);
       clk=0;
       rst=0;
       forever
         #5 clk=~clk;
  end
  initial
    begin
     @(posedge clk);
    @(negedge clk) rst=1;
    @(posedge clk);
    @(negedge clk) rst=0; j=0; k=0;
     @(posedge clk);
    @(negedge clk)  j=0; k=1;
     @(posedge clk);
    @(negedge clk) j=1; k=0;
     @(posedge clk);
    @(negedge clk)  j=1; k=1;
     @(posedge clk);
    #10;
    $finish;
  end
endmodule

// https://www.edaplayground.com/x/qTdy

// DFF

module dff(clk,rst,d,q,qbar);
input clk,rst;
input d;
output reg q, qbar;
always@(posedge clk)
begin
if(rst)
begin 
q<=0;
qbar<=1;
end
else
case(d)
0: begin q<=0; qbar<=1; end
1: begin q<=1; qbar<=0; end
endcase
end
endmodule

// testbench
`timescale 1ns/1ps
module tb;
 reg d;
 reg clk,rst;
 wire q,qbar;
 dff ins1(clk,rst,d,q,qbar);
 
  
  initial begin 
    $monitor($time, " clk=%b,rst=%b,d=%b,q=%b,qbar=%b",clk,rst,d,q,qbar);
       clk=0;
       rst=0;
       forever
         #5 clk=~clk;
  end
  initial
    begin
     @(posedge clk);
     @(negedge clk) rst=1;
     @(posedge clk);
     @(negedge clk) rst=0; d=0;
     @(posedge clk);
     @(negedge clk)  d=1;
     @(posedge clk);
     @(posedge clk);
    #10;
    $finish;
  end
endmodule

//https://www.edaplayground.com/x/eCrd

// T FF

module dff(clk,rst,t,q,qbar);
input clk,rst;
input t;
output reg q, qbar;
always@(posedge clk)
begin
if(rst)
begin 
q<=0;
qbar<=1;
end
else
case(t)
0: begin q<=q; qbar<=qbar; end
1: begin q<=~q; qbar<=~qbar; end
endcase
end
endmodule

// testbench
`timescale 1ns/1ps
module tb;
 reg t;
 reg clk,rst;
 wire q,qbar;
 dff ins1(clk,rst,t,q,qbar);
 
  
  initial begin 
    $monitor($time, " clk=%b,rst=%b,t=%b,q=%b,qbar=%b",clk,rst,t,q,qbar);
       clk=0;
       rst=0;
       forever
         #5 clk=~clk;
  end
  initial
    begin
     @(posedge clk);
     @(negedge clk) rst=1;
     @(posedge clk);
     @(negedge clk) rst=0; t=0;
     @(posedge clk);
     @(negedge clk)  t=1;
     @(posedge clk);
     @(posedge clk);
    #10;
    $finish;
  end
endmodule

//https://www.edaplayground.com/x/r_RM


// Design and implement a system which takes 4-bit data and shifts left, right, reverses, passes the data depending upon a control signal(Don’t use any registers).

module my_shifter(data_in, control, data_out);
input [3:0]data_in;
input [1:0]control;  // {control[1],control[0]}= 2'b01 left shift; =2'b10 right shift; 
                     //                        =2'b11 data pass; =2'b00 no changes
output [3:0]data_out;
assign data_out = (control==2'b00) ? data_out : (control==2'b01) ? data_in<<1 : (control==2'b10) ? data_in >> 1 : data_in;
endmodule

// testbench 

`timescale 1ns / 1ps

module tb;

	// Inputs
	reg [3:0] data_in;
	reg [1:0] control;

	// Outputs
	wire [3:0] data_out;

	// Instantiate the Unit Under Test (UUT)
	my_shifter uut (
		.data_in(data_in), 
		.control(control), 
		.data_out(data_out)
	);

	initial begin
		// Initialize Inputs
		data_in = 4'b1010;
		#5 control = 0;
		#5 control = 1;
      #5 control = 2;
      #5 control = 3;
		#5 control = 0;
      #5 $finish;

	end
      
endmodule

//Design and implement a 4-bit Counter

module counter4bit(clk,rst,count4bit);
input clk,rst;
output reg [3:0]count4bit;

always@(posedge clk)
begin
if(rst)
count4bit<=0;
else
count4bit<=count4bit+1'b1;
endmodule

// testbench 

`timescale 1ns/1ps
module test;
reg clk,rst;
wire [3:0]count4bit;
counter4bit ins1(clk,rst,count4bit);
initial begin 
rst=0;
clk=0;
forever #5 clk=~clk;
end
initial
begin 
@(posedge clk);
@(negedge clk) rst=1;
@(posedge clk);
@(negedge clk) rst=0;
@(posedge clk);

end
endmodule


//Design and implement a system which takes 8-bit data and stores in memory and based on request it should send data ROM/ RAM.


// Code your design here
module memory(data_in, address, wr, rd, clk, rst, data_out);
input [7:0]data_in;
input [3:0]address;
input clk, rst;
input wr,rd;
output reg [7:0]data_out;

reg [7:0]mem[0:15];
integer i;
always@(posedge clk)
begin
if(rst)
begin
for(i=0;i<=15;i=i+1)
mem[i]<=0;
end
else if(wr)
 begin
 mem[address]<=data_in;
 end
 else if(rd)
 begin
 data_out<=mem[address];
 end
 else begin
 data_out<=data_out;
 end
end
endmodule

// Testbench

`timescale 1ns/1ps
module test_ram;
   
reg [7:0]data_in;
reg [3:0]address;
reg clk, rst;
reg wr,rd;
wire [7:0]data_out;
integer i,j;
 
  memory ins1(data_in, address, wr, rd, clk, rst, data_out);
  
  initial begin
    rst=0; clk=0;
    forever #5 clk=~clk;
  end
  
  initial begin
    $monitor($time, "data_in=%0d, address=%0d, wr=%b, rd=%b, clk=%b, rst=%b, data_out=%0d",data_in, address, wr, rd, clk, rst, data_out);
    @(negedge clk) rst=1;
    @(posedge clk) rst=1;
    @(posedge clk) rst=0;
    for(i=0;i<=15; i=i+1)
      begin
        @(negedge clk) wr=1;rd=0; data_in=i*5; address=i;
        @(posedge clk) wr=1;rd=0; data_in=i*5; address=i;
      end
    for(j=0;j<=15; j=j+1)
      begin
        @(negedge clk) wr=0;rd=1; address=j;
        @(posedge clk) wr=0;rd=1; address=j;
      end
    @(negedge clk) wr=0;rd=0;
    @(posedge clk) wr=0;rd=0;
    @(negedge clk) wr=0;rd=0;
    @(posedge clk) wr=0;rd=0;
    
     $finish;
  end
endmodule



